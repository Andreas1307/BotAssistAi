// verifySessionToken.js
const { shopify } = require("./shopify");
const customSessionStorage = require("./sessionStorage");

let decodeSessionTokenFn;

// üß† Safe dynamic import
try {
  const { decodeSessionToken } = require("@shopify/shopify-api/runtime/auth");
  decodeSessionTokenFn = decodeSessionToken;
  console.log("‚úÖ Using decodeSessionToken from runtime/auth");
} catch (err) {
  console.warn("‚ö†Ô∏è decodeSessionToken not found in @shopify/shopify-api/runtime/auth");
}

module.exports = async function verifySessionToken(req, res, next) {
  try {
    const authHeader = req.headers.authorization;

    if (authHeader?.startsWith("Bearer ")) {
      const token = authHeader.replace("Bearer ", "");

      if (!decodeSessionTokenFn) {
        console.error("‚ùå decodeSessionToken function unavailable ‚Äî cannot verify token");
        return res.status(500).send("Shopify auth not properly configured");
      }

      try {
        // ‚úÖ decode JWT with secret key
        const payload = await decodeSessionTokenFn(shopify.config.apiSecretKey, token);

        if (!payload) throw new Error("Invalid JWT payload");

        const shop = payload.dest.replace(/^https:\/\//, "").toLowerCase();
        const onlineSessionId = `${shop}_${payload.sub}`;
        const offlineSessionId = `offline_${shop}`;

        const session =
          (await customSessionStorage.loadCallback(onlineSessionId)) ||
          (await customSessionStorage.loadCallback(offlineSessionId));

        if (session) {
          req.shopify = { shop, session, payload };
          console.log("‚úÖ Shopify session validated via JWT:", shop);
          return next();
        }

        console.warn("‚ö†Ô∏è No session found for JWT payload ‚Äî maybe not stored yet");
        return res.status(401).send("Session expired or invalid.");
      } catch (err) {
        console.warn("‚ö†Ô∏è Invalid or expired JWT:", err.message);
        return res.status(401).send("Invalid Shopify session token.");
      }
    }

    console.log("‚ÑπÔ∏è No Shopify session token ‚Äî treating as external user");
    req.shopify = null;
    return next();
  } catch (err) {
    console.error("‚ùå Session verification failed:", err);
    req.shopify = null;
    next();
  }
};
